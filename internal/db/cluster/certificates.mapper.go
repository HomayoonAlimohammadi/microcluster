package cluster

// The code below was generated by lxd-generate - DO NOT EDIT!

import (
	"context"
	"database/sql"
	"fmt"
	"net/http"

	"github.com/lxc/lxd/lxd/db/query"
	"github.com/lxc/lxd/shared/api"
)

var _ = api.ServerEnvironment{}

var internalCertificateObjects = RegisterStmt(`
SELECT internal_certificates.id, internal_certificates.fingerprint, internal_certificates.type, internal_certificates.name, internal_certificates.certificate
  FROM internal_certificates
  ORDER BY internal_certificates.fingerprint
`)

var internalCertificateObjectsByFingerprint = RegisterStmt(`
SELECT internal_certificates.id, internal_certificates.fingerprint, internal_certificates.type, internal_certificates.name, internal_certificates.certificate
  FROM internal_certificates
  WHERE internal_certificates.fingerprint = ? ORDER BY internal_certificates.fingerprint
`)

var internalCertificateID = RegisterStmt(`
SELECT internal_certificates.id FROM internal_certificates
  WHERE internal_certificates.fingerprint = ?
`)

var internalCertificateCreate = RegisterStmt(`
INSERT INTO internal_certificates (fingerprint, type, name, certificate)
  VALUES (?, ?, ?, ?)
`)

var internalCertificateDeleteByFingerprint = RegisterStmt(`
DELETE FROM internal_certificates WHERE fingerprint = ?
`)

var internalCertificateDeleteByNameAndType = RegisterStmt(`
DELETE FROM internal_certificates WHERE name = ? AND type = ?
`)

var internalCertificateUpdate = RegisterStmt(`
UPDATE internal_certificates
  SET fingerprint = ?, type = ?, name = ?, certificate = ?
 WHERE id = ?
`)

// GetInternalCertificates returns all available internal_certificates.
// generator: internal_certificate GetMany
func GetInternalCertificates(ctx context.Context, tx *sql.Tx, filter InternalCertificateFilter) ([]InternalCertificate, error) {
	var err error

	// Result slice.
	objects := make([]InternalCertificate, 0)

	// Pick the prepared statement and arguments to use based on active criteria.
	var sqlStmt *sql.Stmt
	var args []any

	if filter.Fingerprint != nil && filter.Name == nil && filter.Type == nil {
		sqlStmt = stmt(tx, internalCertificateObjectsByFingerprint)
		args = []any{
			filter.Fingerprint,
		}
	} else if filter.Fingerprint == nil && filter.Name == nil && filter.Type == nil {
		sqlStmt = stmt(tx, internalCertificateObjects)
		args = []any{}
	} else {
		return nil, fmt.Errorf("No statement exists for the given Filter")
	}

	// Dest function for scanning a row.
	dest := func(i int) []any {
		objects = append(objects, InternalCertificate{})
		return []any{
			&objects[i].ID,
			&objects[i].Fingerprint,
			&objects[i].Type,
			&objects[i].Name,
			&objects[i].Certificate,
		}
	}

	// Select.
	err = query.SelectObjects(sqlStmt, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"internals_certificates\" table: %w", err)
	}

	return objects, nil
}

// GetInternalCertificate returns the internal_certificate with the given key.
// generator: internal_certificate GetOne
func GetInternalCertificate(ctx context.Context, tx *sql.Tx, fingerprint string) (*InternalCertificate, error) {
	filter := InternalCertificateFilter{}
	filter.Fingerprint = &fingerprint

	objects, err := GetInternalCertificates(ctx, tx, filter)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"internals_certificates\" table: %w", err)
	}

	switch len(objects) {
	case 0:
		return nil, api.StatusErrorf(http.StatusNotFound, "InternalCertificate not found")
	case 1:
		return &objects[0], nil
	default:
		return nil, fmt.Errorf("More than one \"internals_certificates\" entry matches")
	}
}

// GetInternalCertificateID return the ID of the internal_certificate with the given key.
// generator: internal_certificate ID
func GetInternalCertificateID(ctx context.Context, tx *sql.Tx, fingerprint string) (int64, error) {
	stmt := stmt(tx, internalCertificateID)
	rows, err := stmt.Query(fingerprint)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"internals_certificates\" ID: %w", err)
	}

	defer func() { _ = rows.Close() }()

	// Ensure we read one and only one row.
	if !rows.Next() {
		return -1, api.StatusErrorf(http.StatusNotFound, "InternalCertificate not found")
	}

	var id int64
	err = rows.Scan(&id)
	if err != nil {
		return -1, fmt.Errorf("Failed to scan ID: %w", err)
	}

	if rows.Next() {
		return -1, fmt.Errorf("More than one row returned")
	}

	err = rows.Err()
	if err != nil {
		return -1, fmt.Errorf("Result set failure: %w", err)
	}

	return id, nil
}

// InternalCertificateExists checks if a internal_certificate with the given key exists.
// generator: internal_certificate Exists
func InternalCertificateExists(ctx context.Context, tx *sql.Tx, fingerprint string) (bool, error) {
	_, err := GetInternalCertificateID(ctx, tx, fingerprint)
	if err != nil {
		if api.StatusErrorCheck(err, http.StatusNotFound) {
			return false, nil
		}

		return false, err
	}

	return true, nil
}

// CreateInternalCertificate adds a new internal_certificate to the database.
// generator: internal_certificate Create
func CreateInternalCertificate(ctx context.Context, tx *sql.Tx, object InternalCertificate) (int64, error) {
	// Check if a internal_certificate with the same key exists.
	exists, err := InternalCertificateExists(ctx, tx, object.Fingerprint)
	if err != nil {
		return -1, fmt.Errorf("Failed to check for duplicates: %w", err)
	}

	if exists {
		return -1, api.StatusErrorf(http.StatusConflict, "This \"internals_certificates\" entry already exists")
	}

	args := make([]any, 4)

	// Populate the statement arguments.
	args[0] = object.Fingerprint
	args[1] = object.Type
	args[2] = object.Name
	args[3] = object.Certificate

	// Prepared statement to use.
	stmt := stmt(tx, internalCertificateCreate)

	// Execute the statement.
	result, err := stmt.Exec(args...)
	if err != nil {
		return -1, fmt.Errorf("Failed to create \"internals_certificates\" entry: %w", err)
	}

	id, err := result.LastInsertId()
	if err != nil {
		return -1, fmt.Errorf("Failed to fetch \"internals_certificates\" entry ID: %w", err)
	}

	return id, nil
}

// DeleteInternalCertificate deletes the internal_certificate matching the given key parameters.
// generator: internal_certificate DeleteOne-by-Fingerprint
func DeleteInternalCertificate(ctx context.Context, tx *sql.Tx, fingerprint string) error {
	stmt := stmt(tx, internalCertificateDeleteByFingerprint)
	result, err := stmt.Exec(fingerprint)
	if err != nil {
		return fmt.Errorf("Delete \"internals_certificates\": %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n == 0 {
		return api.StatusErrorf(http.StatusNotFound, "InternalCertificate not found")
	} else if n > 1 {
		return fmt.Errorf("Query deleted %d InternalCertificate rows instead of 1", n)
	}

	return nil
}

// DeleteInternalCertificates deletes the internal_certificate matching the given key parameters.
// generator: internal_certificate DeleteMany-by-Name-and-Type
func DeleteInternalCertificates(ctx context.Context, tx *sql.Tx, name string, internalCertificateType CertificateType) error {
	stmt := stmt(tx, internalCertificateDeleteByNameAndType)
	result, err := stmt.Exec(name, internalCertificateType)
	if err != nil {
		return fmt.Errorf("Delete \"internals_certificates\": %w", err)
	}

	_, err = result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	return nil
}

// UpdateInternalCertificate updates the internal_certificate matching the given key parameters.
// generator: internal_certificate Update
func UpdateInternalCertificate(ctx context.Context, tx *sql.Tx, fingerprint string, object InternalCertificate) error {
	id, err := GetInternalCertificateID(ctx, tx, fingerprint)
	if err != nil {
		return err
	}

	stmt := stmt(tx, internalCertificateUpdate)
	result, err := stmt.Exec(object.Fingerprint, object.Type, object.Name, object.Certificate, id)
	if err != nil {
		return fmt.Errorf("Update \"internals_certificates\" entry failed: %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n != 1 {
		return fmt.Errorf("Query updated %d rows instead of 1", n)
	}

	return nil
}
