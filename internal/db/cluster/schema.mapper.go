package cluster

// The code below was generated by lxd-generate - DO NOT EDIT!

import (
	"context"
	"database/sql"
	"fmt"

	"github.com/lxc/lxd/lxd/db/query"
	"github.com/lxc/lxd/shared/api"
)

var _ = api.ServerEnvironment{}

var internalSchemaObjects = RegisterStmt(`
SELECT internal_schemas.id, internal_schemas.version, internal_schemas.updated_at
  FROM internal_schemas
  ORDER BY internal_schemas.version
`)

// GetInternalSchemas returns all available internal_schemas.
// generator: internal_schema GetMany
func GetInternalSchemas(ctx context.Context, tx *sql.Tx, filter InternalSchemaFilter) ([]InternalSchema, error) {
	var err error

	// Result slice.
	objects := make([]InternalSchema, 0)

	// Pick the prepared statement and arguments to use based on active criteria.
	var sqlStmt *sql.Stmt
	var args []any

	if filter.ID == nil && filter.Version == nil && filter.UpdatedAt == nil {
		sqlStmt = stmt(tx, internalSchemaObjects)
		args = []any{}
	} else {
		return nil, fmt.Errorf("No statement exists for the given Filter")
	}

	// Dest function for scanning a row.
	dest := func(i int) []any {
		objects = append(objects, InternalSchema{})
		return []any{
			&objects[i].ID,
			&objects[i].Version,
			&objects[i].UpdatedAt,
		}
	}

	// Select.
	err = query.SelectObjects(sqlStmt, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"internals_schemas\" table: %w", err)
	}

	return objects, nil
}
